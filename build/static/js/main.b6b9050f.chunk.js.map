{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/counter.js","reducers/islogged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","onClick","type","aria-label","value","onChange","e","target","payload","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"oMAoCeA,MAhCf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cAHJ,EAIiCC,mBAAS,KAJ1C,mBAINC,EAJM,KAIWC,EAJX,KAOb,OACE,sBAAKC,UAAU,MAAf,UACE,2CAAcT,KAEd,wBAAQU,QAAW,kBAAMN,ECZpB,CACHO,KAAM,eDWR,eACA,wBAAQD,QAAW,kBAAMN,ECPpB,CACHO,KAAM,eDMR,eACA,uBACA,uBACIC,aAAW,uBACXC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAmBO,EAAEC,OAAOH,UAE7C,wBACEH,QAAS,kBACPN,ECVD,CACHO,KAAM,eACNM,QDQyBC,OAAOX,IAAoB,KAFpD,wBAQDJ,EAAW,wFAAkE,mEEnBrEgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCMCQ,EAbQ,WAAwB,IAAvB1B,EAAsB,uDAAd,EAAG2B,EAAW,uCAC1C,OAAOA,EAAOlB,MACV,IAAK,YACD,OAAOT,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,IAAK,eACD,OAAOA,EAAS2B,EAAOZ,QAC3B,QACI,OAAOf,ICAJ4B,EATO,WAA4B,IAA3B5B,EAA0B,wDAAX2B,EAAW,uCAC7C,OAAQA,EAAOlB,MACX,IAAK,UACD,OAAQT,EACZ,QACI,OAAOA,ICIJ6B,EALKC,YAAgB,CAChChC,QAAS4B,EACTzB,SAAU2B,ICGRG,EAAQC,YACZH,EACAI,OAAOC,8BAAgCD,OAAOC,gCAGhDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.b6b9050f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement, incrementBy } from './actions/index';\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector(state => state.isLogged);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n\n  return (\n    <div className=\"App\">\n      <h1>Counter: {counter}</h1>\n\n      <button onClick = {() => dispatch(increment())}>+</button>\n      <button onClick = {() => dispatch(decrement())}>-</button>\n      <br />\n      <input\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={e => setIncrementAmount(e.target.value)}\n        />\n        <button\n          onClick={() =>\n            dispatch(incrementBy(Number(incrementAmount) || 0))\n          }\n        >\n          Add Amount\n        </button>\n\n      {isLogged ? <h3>Valuable information I shouldn't see if not logged in.</h3> : <h3>Log in to see the neat stuff!</h3>}\n    </div>\n  );\n}\n\nexport default App;\n","\n\nexport const increment = () => {\n    return {\n        type: 'INCREMENT'\n    };\n};\n\nexport const decrement = () => {\n    return {\n        type: 'DECREMENT'\n    };\n};\n\nexport const incrementBy = (num) => {\n    return {\n        type: 'INCREMENTBY5',\n        payload: num\n    };\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const counterReducer = (state = 0, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT':\n            return state - 1\n        case 'INCREMENTBY5':\n            return state += action.payload\n        default: \n            return state\n    }\n};\n\nexport default counterReducer;","const loggedReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'SIGN_IN':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default loggedReducer;","import counterReducer from './counter';\nimport loggedReducer from './islogged';\nimport { combineReducers } from 'redux';\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer\n});\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport allReducers from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}